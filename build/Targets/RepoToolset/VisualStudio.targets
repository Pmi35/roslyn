<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c)  Microsoft.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information. -->
<Project>

  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <!--
    This is a workaround for allowing neutral CTO resource produced from *.vsct to go in the main assembly.
    We move the neutral *.cto file to be categorized as WithCulture=true,Culture=en to prevent the tools from falsely reporting:
      error VSSDK1006: Two CTO files have the same Menus.ctmenu resource name.
     Note that this categorization does not apply to the items that actually produce the .resources.dll and so it will
     not cause an English satellite to be generated.
     The documented way around this is to put all resources (including neutral/en) in satellites:
       https://msdn.microsoft.com/en-us/library/ee943168.aspx
       However, that has consequences we do not want:
        - It breaks resx code-gen to *.designer.cs
        - It causes extra dll loads in en case
        - If we ever split satellites in to language packs, the english fallback satellites would become a special case.
  -->
  <Target Name="AssignEnCultureToNeutralCto" BeforeTargets="MergeCtoResource">
    <ItemGroup>
      <_GeneratedCTOFilesWithCulture Include="@(_GeneratedCTOFilesWithNoCulture)">
        <Culture>en</Culture>
        <WithCulture>true</WithCulture>
      </_GeneratedCTOFilesWithCulture>
      <_GeneratedCTOFilesWithNoCulture Remove="@(_GeneratedCTOFilesWithNoCulture)" />
      <_ResourcesToMergeWithCTOWithCultureMetadata Condition="'%(WithCulture)' != 'true'">
        <Culture>en</Culture>
        <WithCulture>true</WithCulture>
      </_ResourcesToMergeWithCTOWithCultureMetadata>
    </ItemGroup>
  </Target>

  <!--
    The VSSDK implements some targets which are run during design time builds per convention.
    If the Project is not a VSIX project and sets $CreateVSIXContainer=false these targets should be
    a no-op. However they dont check for that and that's a bug. To workaround, we override them
    with empty targets and conditionally import these if CreateVSIXContainer is false.
    Tracked by https://devdiv.visualstudio.com/DevDiv/_workitems?id=365685&fullScreen=false&_a=edit
   -->
  <Import Project="VisualStudio.DesignTimeBuild.targets" Condition="'$(CreateVsixContainer)' != 'true'"/>

  <!--
    VSSDK is needed in projects generating VSIX packages or pkgdef files.
  -->
  <Import Project="VisualStudio.ImportSdk.targets" Condition="'$(VSToolsPath)' != '' and ('$(IsVsixProject)' == 'true' or '$(GeneratePkgDefFile)' == 'true')" />

  <!--
    Support for templates.
  -->
  <Target Name="_GetVsixTemplateItems" DependsOnTargets="ZipProjects;ZipItems" Condition="'@(VSTemplate)' != ''">
    <ItemGroup>
      <VSIXSourceItem Include="@(IntermediateZipItem)">
        <VSIXSubPath>%(IntermediateZipItem.Filename)\%(IntermediateZipItem.Language)\%(IntermediateZipItem.OutputSubPath)\%(IntermediateZipItem.Culture)</VSIXSubPath>
      </VSIXSourceItem>
      <VSIXSourceItem Include="@(IntermediateZipProject)">
        <VSIXSubPath>%(IntermediateZipProject.Filename)\%(IntermediateZipProject.Language)\%(IntermediateZipProject.OutputSubPath)\%(IntermediateZipProject.Culture)</VSIXSubPath>
      </VSIXSourceItem>
    </ItemGroup>
  </Target>
  <PropertyGroup>
    <GetVsixSourceItemsDependsOn>$(GetVsixSourceItemsDependsOn);_GetVsixTemplateItems</GetVsixSourceItemsDependsOn>
  </PropertyGroup>
  
  <!-- Returns the current build version. Used in .vsixmanifests to substitute our build version into them -->
  <Target Name="GetVsixVersion" Returns="$(VsixVersion)">
    <Error Text="Invalid format of OfficialBuildId: '$(OfficialBuildId)'"
           Condition="$(VersionSuffixDateStamp) != '' and ($(VersionSuffixDateStamp.Length) != 5 or $(VersionSuffixBuildOfTheDayPadded.Length) != 2)"/>
  </Target>
</Project>